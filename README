We designed a Divide-and-Conquer based parallel (shared memory) for document frequency. Fine grain tasks which we considered for parallelism is indexing a document. That is documents are indexed in parallel by different cores. Document indexes are stored in a shared data structure ( shared among all core ) with mutually exclusive access. The shared data structure is a trie. Our inherent assumption is that time taken to read a directory is much less than reading a file. We maintain two global stacks (shared structure). One for directories and other for files. Both accessed in critical section. Directories are popped and read and files and directories pushed to respective stack. We use stacks for dynamic load balancing as we wish to keep all cores active. We try to minimize collision in access to shared data structure by using fine grain locking mechanism. We specify locks for each trie node. Operations on shared structure are always mutually exclusive. We read from the files to large buffers. And scan the buffer and accordingly traverse the trie and increment count of the word if it is the first time in given document automically. After all files indexed, we computed top words sequentially as it does not take much time, and time is an constant independent of number of files. 
