a) Use divide-and-conquer to design a parallel (shared memory) algorithm for
the following problem:
Given a file system and a root directory on Unix, traverse the tree
and (i) extract words from each text file, (ii) compute the
document frequency (DF) of each word, and (iii) determine the
words with the K highest DF.
Document frequency of a word is defined as the number of
documents (i.e. files) in which that word occurs.
b) Implement your parallel algorithm for a) using OpenMP in C/C++. [Hint:
Refer to man pages for: readdir(), struct dirent, and fstat() . End of Hint.]
c) Measure the performance for different input directories by varying the
following parameters:
 maximum depth (4, 16, 64)
 average depth (2, 8, 32)
 average branching factor (1.x, 4, 16, 64, 256)
 total number of files (10 2 , 10 4 , 10 6 , 10 8 )For each input measure the performance for p = 1, 2, .. 2 q where p is the
number of cores used
